/**
 * This code is for testing the connection between a website and a reactor
 */
 target Python

reactor WebSite {
    preamble {=
        import asyncio
        import aiohttp
        from aiohttp import web, WSCloseCode
        import threading
        
        async def http_handler(self, request):
            return self.web.Response(text="""
        <html>
        <head>
        <script>
            const webSocket = new WebSocket("ws://localhost:8000/ws");
            webSocket.onmessage = (event) => {
                var code = document.getElementById("content");
                var html = code.innerHTML;
                var newhtml = "<center>" + event.data + "</center>";
                html = html.replace(html[1], event.data);
                code.innerHTML = html;
            }
            const contactServer = (num) => {
                console.log("Send a message");
                if (num == 0) {
                    webSocket.send(1);
                } else {
                    webSocket.send(-1)
                }
            }
        </script>
        <body>
            <h1>
                <p, id = "content"> 0 </p>
                <center><button onclick="contactServer(0)">+</button>
                <button onclick="contactServer(1)">-</button></center>
            </h1>
        </body>
        </head>
        </html>""",
        content_type = "text/html")

        async def websocket_sender(self, request):
            ws = self.web.WebSocketResponse()
            print("1")
            await ws.prepare(request)
            print("2")
            ws.send_str("1")
        
            return ws
        
        
        async def websocket_handler(self, request):
            ws = self.web.WebSocketResponse()
            await ws.prepare(request)
        
            async for msg in ws:
                print(msg)
                if msg.type == self.aiohttp.WSMsgType.TEXT:
                    if msg.data == "close":
                        await ws.close()
                    else:
                        await ws.send_str("1")
                elif msg.type == self.aiohttp.WSMsgType.ERROR:
                    print("ws connection closed with exception %s" % ws.exception())
        
            return ws
        
        
        def create_runner(self):
            app = self.web.Application()
            app.add_routes([
                self.web.get("/",   self.http_handler),
                self.web.get("/ws", self.websocket_handler),
            ])
            return self.web.AppRunner(app)
        
        
        async def start_server(self, host="localhost", port=8000):
            runner = self.create_runner()
            await runner.setup()
            site = self.web.TCPSite(runner, host, port)
            await site.start()
        =}

    //physical action serverRequest
    // input number

    // physical action update

    // output req
    timer t (1 sec, 1 sec)

    state loop

    reaction (startup) {=
        loop = self.asyncio.get_event_loop()
        loop.run_until_complete(self.start_server())
        loop.run_forever()
    =}

    reaction(t) {=
        print(0)
        self.websocket_sender()
    =}
}
