/**
 * This code is for controlling a motor using a reactor that runs on a raspberrypi 4 board 
 */
 
 target Python

reactor Motor {
    preamble {=
        import time
        import RPi.GPIO as GPIO
    =}

    input result

    state StepCount   (4)
    state TargetAngle (120)
    state StepCounter (0)
    state StepAccum   (0)
    state Direction   (0)

    state StepPins (12,16,20,21)
    state Cycle_1  (0,0,0,1)
    state Cycle_2  (0,0,1,0)
    state Cycle_3  (0,1,0,0)
    state Cycle_4  (1,0,0,0)

    # reaction for testing
    reaction(startup) {=
        self.GPIO.setmode(self.GPIO.BCM)
        
        for pin in self.StepPins:
            self.GPIO.setup(pin,self.GPIO.OUT)
            self.GPIO.output(pin,False)

        while 1:
            if self.Direction == 1: # close the gate: Cycle 1 -> 4
                for pin in range(0, 4):
                    xpin = self.StepPins[pin]
                    if self.StepCounter == 0:
                        if self.Cycle_1[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)
                    elif self.StepCounter == 1:
                        if self.Cycle_2[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)
                    elif self.StepCounter == 2:
                        if self.Cycle_3[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)  
                    elif self.StepCounter == 3:
                        if self.Cycle_4[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)

            else: # open the gate: Cycle 4 -> 1
                for pin in range(0, 4):
                    xpin = self.StepPins[pin]
                    if self.StepCounter == 0:
                        if self.Cycle_4[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)
                    elif self.StepCounter == 1:
                        if self.Cycle_3[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)
                    elif self.StepCounter == 2:
                        if self.Cycle_2[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False)  
                    elif self.StepCounter == 3:
                        if self.Cycle_1[pin] != 0:
                            self.GPIO.output(xpin, True)
                        else:
                            self.GPIO.output(xpin, False) 

            self.StepCounter += 1
            # self.StepAccum += 1

            if self.StepCounter == self.StepCount:
                self.StepCounter = 0
                self.StepAccum += 1
            if self.StepCounter < 0:
                self.StepCounter = self.StepCount
            if self.StepAccum == self.TargetAngle:
                if self.Direction == 1:
                    self.Direction = 0
                else:
                    self.Direction = 1
                self.StepAccum = 0
                self.time.sleep(0.5)
            else:
                self.time.sleep(0.002)

        # except KeyboardInterrupt:
        #     GPIO.clenup()
    =}

    # reaction for actual moving
    // reaction(result) {=
    //     while 1:
    //         if result.value == 0: # close the gate
    //             for pin in range(0, 4):
    //                 xpin = self.StepPins[pin]
    //                 if self.StepCounter == 0:
    //                     if self.Cycle_1[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)
    //                 elif self.StepCounter == 1:
    //                     if self.Cycle_2[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)
    //                 elif self.StepCounter == 2:
    //                     if self.Cycle_3[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)  
    //                 elif self.StepCounter == 1:
    //                     if self.Cycle_4[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)

    //         else: # open the gate
    //             for pin in range(0, 4):
    //                 xpin = self.StepPins[pin]
    //                 if self.StepCounter == 0:
    //                     if self.Cycle_4[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)
    //                 elif self.StepCounter == 1:
    //                     if self.Cycle_3[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)
    //                 elif self.StepCounter == 2:
    //                     if self.Cycle_2[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False)  
    //                 elif self.StepCounter == 1:
    //                     if self.Cycle_1[pin] != 0:
    //                         GPIO.output(xpin, True)
    //                     else:
    //                         GPIO.output(xpin, False) 

    //         self.StepCounter += 1
    //         self.StepAccum += 1

    //         if self.StepCounter == self.StepCount:
    //             self.StepCounter = 0
    //         if self.StepCounter < 0:
    //             self.StepCounter = self.StepCount
    //         if self.StepAccum == self.TargetAngle:
    //             self.StepAccum = 0
    //             break
    //         else:
    //             time.sleep(0.002)
    // =}
}
